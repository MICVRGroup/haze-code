#install.packages("INLA",repos = c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable/src/contrib/INLA_22.05.07.tar.gz"), dep=TRUE)

library(INLA)

dir <- "./Environmetrics/"
lon <- read.csv(paste(dir, "Shanxi.csv", sep=""))
#read data
feng <- read.csv(paste(dir, "feng.csv", sep=""))
yaqiang <- read.csv(paste(dir, "yaqiang.csv", sep=""))
wendu <- read.csv(paste(dir, "wen.csv", sep=""))
shidu <- read.csv(paste(dir, "xiangduishidu.csv", sep=""))
pm <- read.csv(paste(dir, "yuanshiP.csv", sep=""))

locname <- lon[,1]

pmdata <- NULL
for(i in 1:nrow(feng)){
  record1 <- cbind(lon[,2:3], rep(feng[i, 1], nrow(lon)),
                   t(feng[i, 2:ncol(feng)]), t(yaqiang[i, 2:ncol(yaqiang)]),
                   t(wendu[i, 2:ncol(wendu)]), t(shidu[i, 2:ncol(shidu)]),
                   t(pm[i, 2:ncol(pm)]))
  colnames(record1) <- NULL
  rownames(record1) <- NULL
  record1 <- as.matrix(record1)
  pmdata <- rbind(pmdata, record1)
}
pmdata <- as.data.frame(pmdata)
asdate <- function(x){
  x <- paste(substring(x,1,4), "/", 
             substring(x,5,6), "/",
             substring(x,7,8), sep="")
  return(as.Date(x))
}

colnames(pmdata)=c("longitude", "latitude", "yymmdd",
                   "feng", "yaqiang", "wendu", "shidu",
                   "pm2.5")
pmdata$location <- rep(lon[,1], nrow(feng))
pmdata$yymmdd <- asdate(pmdata$yymmdd)
#write.csv(pmdata, file = "pm2.5data.csv")

#split train set and test set
pm.train <- pmdata[1:(1500*11), ]
#dim(pm.train) #16500*9
pm.test <- pmdata[-(1:(1500*11)), ] #3586*9

#scale, log
x.mean <- apply(pm.train[, 4:7], 2, mean)
x.sd <- apply(pm.train[, 4:7], 2, sd)*sqrt(nrow(pm.train))
pmdata.new <- t((t(pmdata[,4:7])-x.mean)/x.sd)
logpm <- log(pmdata$pm2.5)
pmdata.s <- cbind(pmdata[,1:3], pmdata.new, logpm, pmdata[,9])
colnames(pmdata.s)[9] <- "location"
pmdata.s$location <- as.factor(pmdata.s$location)
#write.csv(pmdata.s, file="pm2.5data.s.csv")

pm.train <- pmdata.s[1:(1500*11), ]
#dim(pm.train) #16500*9
pm.test <- pmdata.s[-(1:(1500*11)), ] #3586*9

# mesh
puntiLon <- inla.nonconvex.hull(points=as.matrix(pmdata[,1:2]), convex = 90)
mesh <- inla.mesh.2d(boundary = list(puntiLon), max.edge = c(30,150), cutoff =5, offset = c(10), min.angle = 25)
plot(mesh)
points(as.matrix(pmdata[,1:2]), col="red")

## SPDE
spde <- inla.spde2.pcmatern(mesh=mesh,alpha=2,constr=FALSE,
                            prior.range = c(150,0.8),prior.sigma = c(0.8,0.2))
## index of spatial field
i.index=inla.spde.make.index(name="i",
                             n.spde = spde$n.spde,
                             n.group = length(table(pmdata.s$location)))#n.spde=115
table(i.index$i.group)

# Making the A matrix for train and test
A.train=inla.spde.make.A(mesh,loc=as.matrix(pm.train[,1:2]),
                         group = as.numeric(pm.train$location),
                         n.group = length(table(pmdata.s$location)))
                                            
dim(A.train) #16500*1265
A.test=inla.spde.make.A(mesh,loc= as.matrix(pm.test[,1:2]),
                        group = as.numeric(pm.test$location),
                        n.group = length(table(pmdata.s$location)))
dim(A.test) #3586*1265

# X matrix for train and test
X.train <- as.data.frame(pm.train[, -8]) # convert to a data frame. Eliminate the base level of the first categorical variable if applicable (you will manually specify an intercept below) 
head(X.train)
dim(X.train) # 16500*8
# matrix for test
X.test <- as.data.frame(pm.test[, -8])
head(X.test)
dim(X.test) # 3586*8

## stack
mystack.train=inla.stack(tag="train",
                         data=list(logpm =pm.train$logpm),
                         A = list(1,1,A.train),
                         effects= list(
                           Intercept = rep(1, nrow(pm.train)),
                           X = X.train,
                           i = i.index))
dim(inla.stack.A(mystack.train)) #16500*16534

mystack.test=inla.stack(tag="test",
                        data=list(logpm= NA),
                        A = list(1,1,A.test),
                        effects= list(
                          Intercept = rep(1, nrow(pm.test)),
                          X = X.test,
                          i = i.index))
dim(inla.stack.A(mystack.test)) #3586*3620

# join stack
mystack=inla.stack(mystack.train,mystack.test)


# formula #### 
#Unstructured random effects for the monitoring sites
prec_hyper <- list(theta = list(prior="pc.prec", param=c(1,0.01)))

#AR1 component
theta_hyper <- list(prior="pc.cor1",param=c(0.8,0.318))

myformula <- as.formula(logpm~Intercept+
                          feng+ 
                          yaqiang+ 
                          wendu+ 
                          shidu-1) #Linear distance to the a1 roads

myformula <- update(myformula,.~.+
                       f(i,model=spde,
                         group = i.group,
                         control.group = list(model="ar1",hyper=list(theta=theta_hyper))))



## 7. fit model  
inla.out <- inla(myformula,
                     data=inla.stack.data(mystack,spde=spde),
                     family ="gaussian",
                     verbose=TRUE,
                     control.compute = list(openmp.strategy="pardiso.parallel",cpo=TRUE,waic=TRUE,dic=TRUE,config=TRUE),
                     control.fixed = list(prec.intercept = 0.001, prec=1, mean.intercept=0),
                     control.predictor =list(A=inla.stack.A(mystack),compute=TRUE) )
#forecasting
pred <- inla.out$summary.fitted.values[inla.stack.index(mystack, "test")$data, "mean"]
length(pred) #3586

result1 <- cbind(pm.test$logpm, pred)
colnames(result1)[1] <- "groudtruth"
result1 <- as.data.frame(exp(result1))

result1$location <- pm.test$location
write.csv(result1, file="result1.csv")


